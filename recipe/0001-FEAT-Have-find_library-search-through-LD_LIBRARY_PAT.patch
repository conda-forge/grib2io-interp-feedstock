From e7803a8f4628ae1f1938721bbbc673fc799cccc4 Mon Sep 17 00:00:00 2001
From: Tim Cera <tim@cerazone.net>
Date: Tue, 9 Jan 2024 16:51:48 -0500
Subject: [PATCH] FEAT: Have 'find_library' search through LD_LIBRARY_PATH, if
 set.

---
 setup.py | 64 ++++++++++++++++++++++++++++++++++++++------------------
 1 file changed, 44 insertions(+), 20 deletions(-)

diff --git a/setup.py b/setup.py
index a134688..01a8108 100644
--- a/setup.py
+++ b/setup.py
@@ -1,9 +1,10 @@
+# fmt: off
 from numpy.distutils.core import Extension, setup
 import configparser
+from ctypes.util import find_library as ctypes_find_library
 import numpy
 import os
-import pathlib
-import platform
+from pathlib import Path
 import sys
 
 VERSION = '1.0.3'
@@ -12,37 +13,60 @@ libdirs = []
 incdirs = []
 libraries = ['sp_4','ip_4']
 
+
+# fmt: on
 # ----------------------------------------------------------------------------------------
 # find_library.
 # ----------------------------------------------------------------------------------------
 def find_library(name, dirs=None):
     out = []
     sysinfo = (os.name, sys.platform)
-    if sysinfo == ('posix', 'darwin'):
-        libext = '.dylib'
-    elif sysinfo == ('posix', 'linux'):
-        libext = '.so'
+
+    # According to the ctypes documentation Mac and Windows ctypes_find_library
+    # returns the full path.
+    if sysinfo != ("posix", "linux"):
+        return ctypes_find_library(name)
+
+    # For Linux have to search ourselves.
+    libext = ".so"
     if dirs is None:
-        if os.environ.get('CONDA_PREFIX'):
-            dirs = [os.environ['CONDA_PREFIX']]
+        if os.environ.get("CONDA_PREFIX"):
+            dirs = [os.environ["CONDA_PREFIX"]]
         else:
-            dirs = ['/usr/local', '/sw', '/opt', '/opt/local', '/opt/homebrew', '/usr']
+            dirs = ["/usr/local", "/sw", "/opt", "/opt/local", "/opt/homebrew", "/usr"]
+    if os.environ.get("LD_LIBRARY_PATH"):
+        dirs = dirs + os.environ.get("LD_LIBRARY_PATH").split(":")
+
+    out = []
     for d in dirs:
-        libs = pathlib.Path(d).rglob('lib*'+name+libext)
-        for l in libs:
-            out.append(l.absolute().resolve().as_posix())
-    return list(set(out))[0]
+        libs = Path(d).rglob(f"lib*{name}{libext}")
+        out.extend(libs)
+    if not out:
+        raise ValueError(
+            f"""
+
+The library "lib{name}{libext}" could not be found in any of the following
+directories:
+{dirs}
+
+"""
+        )
+    return out[0].absolute().resolve().as_posix()
+
 
-# ---------------------------------------------------------------------------------------- 
+# fmt: off
+
+
+# ----------------------------------------------------------------------------------------
 # Read setup.cfg
 # ----------------------------------------------------------------------------------------
 setup_cfg = 'setup.cfg'
 config = configparser.ConfigParser()
 config.read(setup_cfg)
 
-# ---------------------------------------------------------------------------------------- 
+# ----------------------------------------------------------------------------------------
 # Get NCEPLIBS-sp library info.  NOTE: NCEPLIBS-sp does not have include files.
-# ---------------------------------------------------------------------------------------- 
+# ----------------------------------------------------------------------------------------
 if os.environ.get('SP_DIR'):
     sp_dir = os.environ.get('SP_DIR')
     sp_libdir = os.path.dirname(find_library('sp_4', dirs=[sp_dir]))
@@ -54,9 +78,9 @@ else:
         sp_libdir = os.path.dirname(find_library('sp_4', dirs=[sp_dir]))
 libdirs.append(sp_libdir)
 
-# ---------------------------------------------------------------------------------------- 
+# ----------------------------------------------------------------------------------------
 # Get NCEPLIBS-ip library info.
-# ---------------------------------------------------------------------------------------- 
+# ----------------------------------------------------------------------------------------
 if os.environ.get('IP_DIR'):
     ip_dir = os.environ.get('IP_DIR')
     ip_libdir = os.path.dirname(find_library('ip_4', dirs=[ip_dir]))
@@ -76,9 +100,9 @@ libdirs = list(set(libdirs))
 incdirs = list(set(incdirs))
 incdirs.append(numpy.get_include())
 
-# ---------------------------------------------------------------------------------------- 
+# ----------------------------------------------------------------------------------------
 # Define interpolation NumPy extension module.
-# ---------------------------------------------------------------------------------------- 
+# ----------------------------------------------------------------------------------------
 interpext = Extension(name = 'grib2io_interp.interpolate',
                       sources = ['src/interpolate/interpolate.pyf','src/interpolate/interpolate.f90'],
                       extra_f77_compile_args = ['-O3','-fopenmp'],
-- 
2.40.0.windows.1

